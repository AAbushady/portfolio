---
import '../styles/global.css';

interface Props {
	title?: string | undefined;
	description?: string | undefined;
	structuredData?: object | undefined;
	ogImage?: string | undefined;
	ogType?: string | undefined;
	publishDate?: Date | undefined;
}

const {
	title = 'Alex Abushady: Portfolio',
	description = 'The personal site of Alex Abushady',
	structuredData,
	ogImage = '/assets/og-default.svg',
	ogType = 'website',
	publishDate,
} = Astro.props;

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const ogImageURL = new URL(ogImage, Astro.site);
---

<meta charset="UTF-8" />
<meta name="description" content={description} />
<meta name="viewport" content="width=device-width" />
<meta name="generator" content={Astro.generator} />
<meta name="author" content="Alex Abushady" />
<title>{title}</title>

<!-- Open Graph Tags -->
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:type" content={ogType} />
<meta property="og:url" content={canonicalURL.href} />
<meta property="og:site_name" content="Alex Abushady" />
<meta property="og:locale" content="en_US" />
<meta name="image" property="og:image" content={ogImageURL.href} />
<meta property="og:image:width" content="1200" />
<meta property="og:image:height" content="630" />
<meta property="og:image:alt" content="Alex Abushady - Software Engineer Portfolio" />
<meta property="og:author" content="Alex Abushady" />

<!-- Article-specific meta tags -->
{ogType === 'article' && publishDate && (
	<meta property="article:published_time" content={publishDate.toISOString()} />
	<meta property="article:author" content="Alex Abushady" />
)}

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL.href} />

<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
	href="https://fonts.googleapis.com/css2?family=Public+Sans:ital,wght@0,400;0,700;1,400&family=Rubik:wght@500;600&display=swap"
	rel="stylesheet"
/>

<!-- JSON-LD structured data for Person schema -->
<script type="application/ld+json">
{
  "@context": "https://schema.org",
  "@type": "Person",
  "name": "Alex Abushady",
  "jobTitle": "Software Engineer",
  "url": "https://alexabushady.com",
  "sameAs": [
    "https://github.com/alexabushady",
    "https://linkedin.com/in/alexabushady"
  ],
  "knowsAbout": [
    "Software Engineering",
    "Machine Learning",
    "Large Language Models",
    "Python",
    "JavaScript",
    "React",
    "Node.js",
    "Data Science",
    "C#",
    "Video Games"
  ],
  "alumniOf": {
    "@type": "EducationalOrganization",
    "name": "St. Petersburg"
  },
  "hasOccupation": {
    "@type": "Occupation",
    "name": "Software Engineer",
    "occupationLocation": {
      "@type": "Place",
      "name": "United States"
    }
  }
}
</script>

{structuredData && (
  <script type="application/ld+json" set:html={JSON.stringify(structuredData)}></script>
)}

<script is:inline>
	// This code is inlined in the head to make dark mode instant & blocking.
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('theme-dark');

	if (typeof localStorage !== 'undefined') {
		// Watch the document element and persist user preference when it changes.
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('theme-dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>
